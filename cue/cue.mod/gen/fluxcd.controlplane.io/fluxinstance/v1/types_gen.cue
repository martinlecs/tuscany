// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://github.com/controlplaneio-fluxcd/flux-operator/releases/download/v0.22.0/install.yaml

package v1

import "strings"

// FluxInstance is the Schema for the fluxinstances API
#FluxInstance: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "fluxcd.controlplane.io/v1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "FluxInstance"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// FluxInstanceSpec defines the desired state of FluxInstance
	spec!: #FluxInstanceSpec
}

// FluxInstanceSpec defines the desired state of FluxInstance
#FluxInstanceSpec: {
	// Cluster holds the specification of the Kubernetes cluster.
	cluster?: {
		// Domain is the cluster domain used for generating the FQDN of
		// services.
		// Defaults to 'cluster.local'.
		domain!: string

		// Multitenant enables the multitenancy lockdown.
		multitenant?: bool

		// NetworkPolicy restricts network access to the current
		// namespace.
		// Defaults to true.
		networkPolicy!: bool

		// TenantDefaultServiceAccount is the name of the service account
		// to use as default when the multitenant lockdown is enabled.
		// Defaults to the 'default' service account from the tenant
		// namespace.
		tenantDefaultServiceAccount?: string

		// Type specifies the distro of the Kubernetes cluster.
		// Defaults to 'kubernetes'.
		type?: "kubernetes" | "openshift" | "aws" | "azure" | "gcp"
	}

	// CommonMetadata specifies the common labels and annotations that
	// are
	// applied to all resources. Any existing label or annotation will
	// be
	// overridden if its key matches a common one.
	commonMetadata?: {
		// Annotations to be added to the object's metadata.
		annotations?: {
			[string]: string
		}

		// Labels to be added to the object's metadata.
		labels?: {
			[string]: string
		}
	}

	// Components is the list of controllers to install.
	// Defaults to all controllers.
	components?: [..."source-controller" | "kustomize-controller" | "helm-controller" | "notification-controller" | "image-reflector-controller" | "image-automation-controller"]

	// Distribution specifies the version and container registry to
	// pull images from.
	distribution!: {
		// Artifact is the URL to the OCI artifact containing
		// the latest Kubernetes manifests for the distribution,
		// e.g.
		// 'oci://ghcr.io/controlplaneio-fluxcd/flux-operator-manifests:latest'.
		artifact?: =~"^oci://.*$"

		// ArtifactPullSecret is the name of the Kubernetes secret
		// to use for pulling the Kubernetes manifests for the
		// distribution specified in the Artifact field.
		artifactPullSecret?: string

		// ImagePullSecret is the name of the Kubernetes secret
		// to use for pulling images.
		imagePullSecret?: string

		// Registry address to pull the distribution images from
		// e.g. 'ghcr.io/fluxcd'.
		registry!: string

		// Version semver expression e.g. '2.x', '2.3.x'.
		version!: string
	}
	kustomize?: {
		// Strategic merge and JSON patches, defined as inline YAML
		// objects,
		// capable of targeting objects based on kind, label and
		// annotation selectors.
		patches?: [...{
			// Patch contains an inline StrategicMerge patch or an inline
			// JSON6902 patch with
			// an array of operation objects.
			patch!: string

			// Target points to the resources that the patch document should
			// be applied to.
			target?: {
				// AnnotationSelector is a string that follows the label selection
				// expression
				// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
				// It matches with the resource annotations.
				annotationSelector?: string

				// Group is the API group to select resources from.
				// Together with Version and Kind it is capable of unambiguously
				// identifying and/or selecting resources.
				// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
				group?: string

				// Kind of the API Group to select resources from.
				// Together with Group and Version it is capable of unambiguously
				// identifying and/or selecting resources.
				// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
				kind?: string

				// LabelSelector is a string that follows the label selection
				// expression
				// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
				// It matches with the resource labels.
				labelSelector?: string

				// Name to match resources with.
				name?: string

				// Namespace to select resources from.
				namespace?: string

				// Version of the API Group to select resources from.
				// Together with Group and Kind it is capable of unambiguously
				// identifying and/or selecting resources.
				// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
				version?: string
			}
		}]
	}

	// MigrateResources instructs the controller to migrate the Flux
	// custom resources
	// from the previous version to the latest API version specified
	// in the CRD.
	// Defaults to true.
	migrateResources?: bool

	// Sharding holds the specification of the sharding configuration.
	sharding?: {
		// Key is the label key used to shard the resources.
		key?: string

		// Shards is the list of shard names.
		shards!: [...string] & [_, ...]
	}

	// Storage holds the specification of the source-controller
	// persistent volume claim.
	storage?: {
		// Class is the storage class to use for the PVC.
		class!: string

		// Size is the size of the PVC.
		size!: string
	}

	// Sync specifies the source for the cluster sync operation.
	// When set, a Flux source (GitRepository, OCIRepository or
	// Bucket)
	// and Flux Kustomization are created to sync the cluster state
	// with the source repository.
	sync?: {
		// Interval is the time between syncs.
		interval?: =~"^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$"

		// Kind is the kind of the source.
		kind!: "OCIRepository" | "GitRepository" | "Bucket"

		// Name is the name of the Flux source and kustomization
		// resources.
		// When not specified, the name is set to the namespace name of
		// the FluxInstance.
		name?: strings.MaxRunes(63)

		// Path is the path to the source directory containing
		// the kustomize overlay or plain Kubernetes manifests.
		path!: string

		// Provider specifies OIDC provider for source authentication.
		// For OCIRepository and Bucket the provider can be set to 'aws',
		// 'azure' or 'gcp'.
		// for GitRepository the accepted value can be set to 'azure' or
		// 'github'.
		// To disable OIDC authentication the provider can be set to
		// 'generic' or left empty.
		provider?: "generic" | "aws" | "azure" | "gcp" | "github"

		// PullSecret specifies the Kubernetes Secret containing the
		// authentication credentials for the source.
		// For Git over HTTP/S sources, the secret must contain username
		// and password fields.
		// For Git over SSH sources, the secret must contain known_hosts
		// and identity fields.
		// For OCI sources, the secret must be of type
		// kubernetes.io/dockerconfigjson.
		// For Bucket sources, the secret must contain accesskey and
		// secretkey fields.
		pullSecret?: string

		// Ref is the source reference, can be a Git ref name e.g.
		// 'refs/heads/main',
		// an OCI tag e.g. 'latest' or a bucket name e.g. 'flux'.
		ref!: string

		// URL is the source URL, can be a Git repository HTTP/S or SSH
		// address,
		// an OCI repository address or a Bucket endpoint.
		url!: string
	}

	// Wait instructs the controller to check the health of all the
	// reconciled
	// resources. Defaults to true.
	wait?: bool
}
