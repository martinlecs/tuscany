// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://github.com/controlplaneio-fluxcd/flux-operator/releases/download/v0.22.0/install.yaml

package v1

import "strings"

// ResourceSet is the Schema for the ResourceSets API.
#ResourceSet: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "fluxcd.controlplane.io/v1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "ResourceSet"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// ResourceSetSpec defines the desired state of ResourceSet
	spec!: #ResourceSetSpec
}

// ResourceSetSpec defines the desired state of ResourceSet
#ResourceSetSpec: {
	// CommonMetadata specifies the common labels and annotations that
	// are
	// applied to all resources. Any existing label or annotation will
	// be
	// overridden if its key matches a common one.
	commonMetadata?: {
		// Annotations to be added to the object's metadata.
		annotations?: {
			[string]: string
		}

		// Labels to be added to the object's metadata.
		labels?: {
			[string]: string
		}
	}

	// DependsOn specifies the list of Kubernetes resources that must
	// exist on the cluster before the reconciliation process starts.
	dependsOn?: [...{
		// APIVersion of the resource to depend on.
		apiVersion!: string

		// Kind of the resource to depend on.
		kind!: string

		// Name of the resource to depend on.
		name!: string

		// Namespace of the resource to depend on.
		namespace?: string

		// Ready checks if the resource Ready status condition is true.
		ready?: bool

		// ReadyExpr checks if the resource satisfies the given CEL
		// expression.
		// The expression replaces the default readiness check and
		// is only evaluated if Ready is set to 'true'.
		readyExpr?: string
	}]

	// Inputs contains the list of ResourceSet inputs.
	inputs?: [...{
		[string]: _
	}]

	// InputsFrom contains the list of references to input providers.
	// When set, the inputs are fetched from the providers and
	// concatenated
	// with the in-line inputs defined in the ResourceSet.
	inputsFrom?: [...{
		// APIVersion of the input provider resource.
		// When not set, the APIVersion of the ResourceSet is used.
		apiVersion?: string

		// Kind of the input provider resource.
		kind!: "ResourceSetInputProvider"

		// Name of the input provider resource. Cannot be set
		// when the Selector field is set.
		name?: string

		// Selector is a label selector to filter the input provider
		// resources
		// as an alternative to the Name field.
		selector?: {
			// matchExpressions is a list of label selector requirements. The
			// requirements are ANDed.
			matchExpressions?: [...{
				// key is the label key that the selector applies to.
				key!: string

				// operator represents a key's relationship to a set of values.
				// Valid operators are In, NotIn, Exists and DoesNotExist.
				operator!: string

				// values is an array of string values. If the operator is In or
				// NotIn,
				// the values array must be non-empty. If the operator is Exists
				// or DoesNotExist,
				// the values array must be empty. This array is replaced during a
				// strategic
				// merge patch.
				values?: [...string]
			}]

			// matchLabels is a map of {key,value} pairs. A single {key,value}
			// in the matchLabels
			// map is equivalent to an element of matchExpressions, whose key
			// field is "key", the
			// operator is "In", and the values array contains only "value".
			// The requirements are ANDed.
			matchLabels?: {
				[string]: string
			}
		}
	}]

	// Resources contains the list of Kubernetes resources to
	// reconcile.
	resources?: [...]

	// ResourcesTemplate is a Go template that generates the list of
	// Kubernetes resources to reconcile. The template is rendered
	// as multi-document YAML, the resources should be separated by
	// '---'.
	// When both Resources and ResourcesTemplate are set, the
	// resulting
	// objects are merged and deduplicated, with the ones from
	// Resources taking precedence.
	resourcesTemplate?: string

	// The name of the Kubernetes service account to impersonate
	// when reconciling the generated resources.
	serviceAccountName?: string

	// Wait instructs the controller to check the health
	// of all the reconciled resources.
	wait?: bool
}
